import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabaseClient';
import { 
  Box, 
  Button, 
  Typography, 
  Paper, 
  Stack, 
  Divider, 
  Alert, 
  Card, 
  CardContent,
  Grid,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Switch,
  FormControlLabel,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Avatar,
  Badge,
  CircularProgress
} from '@mui/material';
import QRCode from 'qrcode.react';
import Link from 'next/link';
import {
  QrCodeScanner,
  Notifications,
  NotificationsOff,
  Person,
  Event,
  Hotel,
  LocationOn,
  Download,
  Logout,
  ContactPhone,
  School,
  EmojiEvents,
  Map,
  AdminPanelSettings
} from '@mui/icons-material';
import dynamic from 'next/dynamic';
import { toast } from 'react-hot-toast';
import NotificationDropdown from '../components/NotificationDropdown';
import ReactMarkdown from 'react-markdown';

// On charge le QRCodeScanner de façon dynamique pour éviter les erreurs de build
const QRCodeScanner = dynamic(() => import('../components/QRCodeScanner'), {
  ssr: false,
  loading: () => <CircularProgress />, 
});

export const getServerSideProps = async ({ req }) => {
  // Vérifier si l'utilisateur est connecté via la session
  const sessionCookie = req.cookies['cnol-session'];
  
  if (!sessionCookie) {
    return {
      redirect: {
        destination: '/identification',
        permanent: false,
      },
    };
  }

  try {
    // Décoder la session
    const sessionData = JSON.parse(decodeURIComponent(sessionCookie));
    
    if (!sessionData || !sessionData.id) {
      return {
        redirect: {
          destination: '/identification',
          permanent: false,
        },
      };
    }

    // 1. Récupérer les données de base de l'utilisateur
    const { data: userData, error: userError } = await supabase
      .from('inscription')
      .select('*')
      .eq('id', sessionData.id)
      .single();

    if (userError || !userData) {
      return {
        redirect: {
          destination: '/identification?error=user_not_found',
          permanent: false,
        },
      };
    }
    
    // 2. Récupérer les réservations d'ateliers par email
    const { data: ateliersData, error: ateliersError } = await supabase
        .from('reservations_ateliers')
        .select('*, ateliers(*)')
        .eq('email', userData.email);

    // 3. Récupérer les réservations de masterclass par email
    const { data: masterclassData, error: masterclassError } = await supabase
        .from('reservations_masterclass')
        .select('*, masterclasses:masterclass(*)')
        .eq('email', userData.email);

    if (ateliersError || masterclassError) {
        console.error("Erreur de récupération des réservations:", ateliersError, masterclassError);
    }
    
    // 4. Combiner les données et les passer au composant
    const userWithReservations = {
      ...userData,
      reservations_ateliers: ateliersData || [],
      reservations_masterclass: masterclassData || [],
    };

    return {
      props: {
        user: userWithReservations,
      },
    };
  } catch (error) {
    console.error('Erreur de session:', error);
    return {
      redirect: {
        destination: '/identification',
        permanent: false,
      },
    };
  }
};

export default function MonEspace({ user }) {
  const router = useRouter();
  const [notificationsEnabled, setNotificationsEnabled] = useState(false);
  const [contacts, setContacts] = useState([]);
  const [settings, setSettings] = useState({});
  const [notifications, setNotifications] = useState([]);
  const [exposantsList, setExposantsList] = useState([]);
  const [standsVisites, setStandsVisites] = useState([]);
  const [loadingStandsVisites, setLoadingStandsVisites] = useState(false);
  const [lastScan, setLastScan] = useState(null);
  const [programme, setProgramme] = useState('');
  const [programmeDate, setProgrammeDate] = useState(null);
  const [programmeLoading, setProgrammeLoading] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [contactsModalOpen, setContactsModalOpen] = useState(false);

  // Détermine si l'utilisateur a le droit de voir les ateliers/masterclass
  const isAllowedForWorkshops = user && (user.fonction === 'Opticien' || user.fonction === 'Ophtalmologue');

  // Bouton Admin visible uniquement pour les admins
  const isAdmin = user && user.role === 'admin';

  useEffect(() => {
    // Vérifier les permissions de notifications
    if ('Notification' in window) {
      setNotificationsEnabled(Notification.permission === 'granted');
    }

    // Charger les paramètres
    const fetchSettings = async () => {
      const { data } = await supabase.from('settings').select('*').single();
      if (data) setSettings(data);
    };
    fetchSettings();

    // Charger les contacts collectés
    const fetchContacts = async () => {
      const { data, error } = await supabase.rpc('get_user_contacts', {
        p_collector_id: user.id,
      });

      if (error) {
        console.error('Erreur chargement contacts:', error);
      } else {
        setContacts(data || []);
      }
    };
    fetchContacts();

    // Charger les notifications reçues
    const fetchNotifications = async () => {
      const { data, error } = await supabase
        .from('notifications')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });
      if (!error && data) setNotifications(data);
    };
    fetchNotifications();

    // Charger la liste des exposants
    const fetchExposants = async () => {
      const { data, error } = await supabase.from('exposants').select('*');
      if (error) {
        console.error('Erreur chargement exposants:', error);
      } else {
        setExposantsList(data || []);
      }
    };
    fetchExposants();

    // Récupérer les stands visités
    const fetchStandsVisites = async () => {
      setLoadingStandsVisites(true);
      try {
        const res = await fetch('/api/user-space', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include'
        });
        const data = await res.json();
        setStandsVisites(data.stands_visites || []);
      } catch (e) {
        setStandsVisites([]);
      }
      setLoadingStandsVisites(false);
    };
    if (user && user.identifiant_badge && user.email) fetchStandsVisites();

    // Charger le dernier scan depuis localStorage
    if (typeof window !== 'undefined') {
      const scan = localStorage.getItem('lastScanResult');
      if (scan) setLastScan(JSON.parse(scan));
    }

    // Charger le programme général publié
    const fetchProgramme = async () => {
      setProgrammeLoading(true);
      const res = await fetch('/api/programme-general?published=true');
      const data = await res.json();
      if (data && data.contenu) {
        setProgramme(data.contenu);
        setProgrammeDate(data.date_publication);
      }
      setProgrammeLoading(false);
    };
    fetchProgramme();
  }, [user.identifiant_badge, user.email]);

  const handleLogout = async () => {
    // Vider le localStorage (sécurité)
    if (typeof window !== 'undefined') {
      localStorage.clear();
    }
    // Réinitialiser le state React
    setStandsVisites([]);
    setLastScan(null);
    setContacts([]);
    setNotifications([]);
    setExposantsList([]);
    setSettings({});
    // Déconnexion serveur
    await fetch('/api/logout', { method: 'POST' });
    // Forcer un reload complet pour éviter tout cache
    window.location.href = '/identification';
  };

  const handleNotificationToggle = async () => {
    if (!('Notification' in window) || !('serviceWorker' in navigator)) {
      alert("Les notifications ne sont pas supportées par votre navigateur.");
      return;
    }

    // Fonction utilitaire pour convertir la clé VAPID
    function urlBase64ToUint8Array(base64String) {
      const padding = "=".repeat((4 - base64String.length % 4) % 4);
      const base64 = (base64String + padding)
        .replace(/\-/g, "+")
        .replace(/_/g, "/");
    
      const rawData = window.atob(base64);
      const outputArray = new Uint8Array(rawData.length);
    
      for (let i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
      }
      return outputArray;
    }

    if (Notification.permission === 'denied') {
      alert("Vous avez bloqué les notifications. Veuillez les autoriser dans les paramètres de votre navigateur.");
      return;
    }

    // Demander la permission
    const permission = await Notification.requestPermission();
    if (permission !== 'granted') {
      alert("Permission de notification non accordée.");
      setNotificationsEnabled(false);
      return;
    }
    
    setNotificationsEnabled(true);
    const toastId = toast.loading('Activation des notifications...');

    try {
      const vapidPublicKey = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY;
      if (!vapidPublicKey) {
        throw new Error('La clé VAPID publique n\'est pas configurée.');
      }
      
      const applicationServerKey = urlBase64ToUint8Array(vapidPublicKey);

      // Enregistrer le Service Worker
      const sw = await navigator.serviceWorker.ready;
      
      // S'abonner aux notifications push
      const subscription = await sw.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey,
      });

      // Envoyer l'abonnement au serveur
      const response = await fetch('/api/push/subscribe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ subscription, userId: user.id }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Échec de l\'abonnement côté serveur.');
      }

      toast.success('Vous êtes maintenant abonné aux notifications !', { id: toastId });

    } catch (error) {
      console.error("Erreur lors de l'abonnement aux notifications:", error);
      toast.error(`Erreur: ${error.message}`, { id: toastId });
      setNotificationsEnabled(false);
    }
  };

  const handleDownloadPdfBadge = async () => {
    // Vérifier que l'utilisateur est validé avant de permettre le téléchargement
    if (!user.valide) {
      alert('Votre inscription doit être validée par l\'administrateur avant de pouvoir télécharger votre badge.');
      return;
    }

    try {
      // Afficher un indicateur de chargement
      alert('Génération de votre badge PDF en cours... Veuillez patienter.');

      const response = await fetch(`/api/generatedbadge?id=${user.id}`);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'La génération du badge a échoué.');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `badge-cnol2025-${user.nom}-${user.prenom}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.parentNode.removeChild(link);
      window.URL.revokeObjectURL(url);

    } catch (error) {
      console.error('Erreur lors du téléchargement du badge PDF:', error);
      alert(`Erreur: ${error.message}`);
    }
  };

  // Ajout pour marquer comme lu
  const markAllNotificationsRead = async () => {
    // Optimiste : on met à jour localement
    setNotifications((prev) => prev.map(n => ({ ...n, lu: true })));
    // Appel API pour marquer comme lu côté serveur (à adapter selon votre API)
    await fetch('/api/notifications/mark-all-read', { method: 'POST', body: JSON.stringify({ userId: user.id }) });
  };

  const handleNotificationClick = (notif) => {
    if (notif.url) window.open(notif.url, '_blank');
    // Marquer comme lu localement
    setNotifications((prev) => prev.map(n => n.id === notif.id ? { ...n, lu: true } : n));
    // Appel API pour marquer comme lu côté serveur (à adapter)
    fetch('/api/notifications/mark-read', { method: 'POST', body: JSON.stringify({ id: notif.id }) });
  };

  // Fonction pour télécharger la fiche exposant
  const handleDownloadExposantFiche = async (exposantId, exposantNom) => {
    const toastId = toast.loading('Génération de la fiche exposant...');
    try {
      const res = await fetch(`/api/download-exposant-fiche?id=${exposantId}`);
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || 'Erreur lors de la génération de la fiche');
      }
      const blob = await res.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      const nomSafe = exposantNom.replace(/[^a-z0-9]/gi, '_').toLowerCase();
      link.setAttribute('download', `fiche-exposant-${nomSafe}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.parentNode.removeChild(link);
      window.URL.revokeObjectURL(url);
      toast.success('Fiche exposant téléchargée !', { id: toastId });
    } catch (e) {
      console.error("Erreur téléchargement fiche exposant:", e);
      toast.error(`Erreur: ${e.message}`, { id: toastId });
    }
  };

  const handleDownloadProgrammePdf = () => {
    window.open('/api/generate-programme-pdf', '_blank');
  };

  const handleShareWhatsapp = () => {
    const url = window.location.origin + '/api/generate-programme-pdf';
    const text = encodeURIComponent('Programme scientifique CNOL 2025 : ' + url);
    window.open(`https://wa.me/?text=${text}`, '_blank');
  };

  function downloadVCard(contact) {
    const vCard = `BEGIN:VCARD\nVERSION:3.0\nFN:${contact.prenom ? contact.prenom + ' ' : ''}${contact.nom}\nN:${contact.nom};${contact.prenom || ''}\nEMAIL:${contact.email || ''}\nTEL:${contact.telephone || ''}\nEND:VCARD`;
    const blob = new Blob([vCard], { type: 'text/vcard' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${contact.nom}.vcf`;
    a.click();
    URL.revokeObjectURL(url);
  }

  return (
    <Box sx={{ p: 2 }}>
      <Paper sx={{ p: 2 }}>
        <Stack spacing={2}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="h5">
              Bonjour, {user.prenom}
            </Typography>
            <Button onClick={handleLogout} variant="outlined" color="secondary" size="small">
              Se déconnecter
            </Button>
          </Box>

          <Divider />

          <Typography variant="h6">Votre Badge</Typography>
          {user.valide ? (
            <Stack alignItems="center" spacing={1}>
              <QRCode id="qr-code" value={user.badge_code || user.email} size={150} />
              <Typography variant="body2" color="text.secondary">
                Code: {user.badge_code || 'N/A'}
              </Typography>
              <Button variant="contained">Télécharger le Badge</Button>
            </Stack>
          ) : (
            <Alert severity="warning">
              Votre inscription est en attente de validation. Votre badge sera disponible ici une fois votre compte approuvé.
            </Alert>
          )}

          <Divider />

          <Typography variant="h6">Hôtels Partenaires</Typography>
          <Typography variant="body2" sx={{ mb: 1 }}>
            Consultez la liste des hôtels partenaires et préparez votre séjour.
          </Typography>
          <Link href="/hotels" passHref>
            <Button variant="contained" color="primary">Voir les hôtels</Button>
          </Link>

          <Divider />

          <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', mt: 2 }}>
            D'autres fonctionnalités à venir...
          </Typography>
        </Stack>
      </Paper>
    </Box>
  );
}
