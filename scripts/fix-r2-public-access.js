// Script pour diagnostiquer et corriger l'acc√®s public R2
const { S3Client, PutBucketCorsCommand, GetBucketCorsCommand, PutBucketPolicyCommand } = require('@aws-sdk/client-s3');

// Configuration R2
const r2Endpoint = process.env.CLOUDFLARE_R2_ENDPOINT || 'https://23ca20c57ea5bdbe4dbe3efc5df73c1d.r2.cloudflarestorage.com';
const r2Bucket = process.env.CLOUDFLARE_R2_BUCKET_NAME || 'cnol';
const r2AccessKeyId = process.env.CLOUDFLARE_R2_ACCESS_KEY_ID;
const r2SecretAccessKey = process.env.CLOUDFLARE_R2_SECRET_ACCESS_KEY;

console.log('üîß DIAGNOSTIC ET CORRECTION DE L\'ACC√àS PUBLIC R2...\n');

if (!r2AccessKeyId || !r2SecretAccessKey) {
  console.error('‚ùå Variables R2 manquantes !');
  console.log('   V√©rifiez votre fichier .env');
  process.exit(1);
}

const r2Client = new S3Client({
  region: 'auto',
  endpoint: r2Endpoint,
  credentials: {
    accessKeyId: r2AccessKeyId,
    secretAccessKey: r2SecretAccessKey,
  },
});

async function fixR2PublicAccess() {
  try {
    console.log('üìã √âTAPE 1: V√©rification de la configuration CORS actuelle...');
    
    try {
      const corsCommand = new GetBucketCorsCommand({ Bucket: r2Bucket });
      const corsResult = await r2Client.send(corsCommand);
      console.log('   ‚úÖ Configuration CORS actuelle:');
      console.log('      ', JSON.stringify(corsResult.CORSRules, null, 2));
    } catch (error) {
      if (error.name === 'NoSuchCORSConfiguration') {
        console.log('   ‚ÑπÔ∏è  Aucune configuration CORS trouv√©e');
      } else {
        console.log(`   ‚ùå Erreur r√©cup√©ration CORS: ${error.message}`);
      }
    }
    
    console.log('\nüîß √âTAPE 2: Configuration CORS pour acc√®s public...');
    
    const corsConfig = {
      CORSRules: [
        {
          AllowedHeaders: ['*'],
          AllowedMethods: ['GET', 'PUT', 'POST', 'DELETE', 'HEAD'],
          AllowedOrigins: ['*'],
          ExposeHeaders: ['ETag', 'Content-Length', 'Content-Type'],
          MaxAgeSeconds: 3000
        }
      ]
    };
    
    try {
      const putCorsCommand = new PutBucketCorsCommand({
        Bucket: r2Bucket,
        CORSConfiguration: corsConfig
      });
      
      await r2Client.send(putCorsCommand);
      console.log('   ‚úÖ Configuration CORS mise √† jour');
      console.log('      - AllowedOrigins: * (acc√®s public)');
      console.log('      - AllowedMethods: GET, PUT, POST, DELETE, HEAD');
      console.log('      - AllowedHeaders: *');
      
    } catch (error) {
      console.log(`   ‚ùå Erreur mise √† jour CORS: ${error.message}`);
    }
    
    console.log('\nüîß √âTAPE 3: Configuration de la politique de bucket...');
    
    const bucketPolicy = {
      Version: '2012-10-17',
      Statement: [
        {
          Sid: 'PublicReadGetObject',
          Effect: 'Allow',
          Principal: '*',
          Action: 's3:GetObject',
          Resource: `arn:aws:s3:::${r2Bucket}/*`
        }
      ]
    };
    
    try {
      const putPolicyCommand = new PutBucketPolicyCommand({
        Bucket: r2Bucket,
        Policy: JSON.stringify(bucketPolicy)
      });
      
      await r2Client.send(putPolicyCommand);
      console.log('   ‚úÖ Politique de bucket mise √† jour');
      console.log('      - Acc√®s public en lecture autoris√©');
      console.log('      - Principal: * (tout le monde)');
      console.log('      - Action: s3:GetObject (lecture)');
      
    } catch (error) {
      console.log(`   ‚ùå Erreur mise √† jour politique: ${error.message}`);
      console.log('   ‚ÑπÔ∏è  Cette erreur peut √™tre normale si la politique existe d√©j√†');
    }
    
    console.log('\nüß™ √âTAPE 4: Test de l\'acc√®s public...');
    
    // Tester avec un fichier existant
    const testFileName = 'badge-cnol2025---beldi-marouane.pdf';
    const publicUrl = `${r2Endpoint}/${r2Bucket}/${testFileName}`;
    
    console.log(`   üîó Test URL: ${publicUrl}`);
    
    try {
      const response = await fetch(publicUrl);
      if (response.ok) {
        console.log(`   ‚úÖ Acc√®s public: ACTIF (${response.status})`);
        console.log(`   üìä Taille: ${(response.headers.get('content-length') / 1024).toFixed(1)} KB`);
        console.log(`   üéØ Type: ${response.headers.get('content-type')}`);
      } else {
        console.log(`   ‚ùå Acc√®s public: INACTIF (${response.status})`);
        console.log(`   üìù R√©ponse: ${response.statusText}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur acc√®s public: ${error.message}`);
    }
    
    console.log('\nüí° INSTRUCTIONS MANUELLES CLOUDFLARE :');
    console.log('   1. Allez sur [dash.cloudflare.com](https://dash.cloudflare.com)');
    console.log('   2. S√©lectionnez votre compte R2');
    console.log('   3. Allez dans "Object Storage" ‚Üí "Manage R2 API tokens"');
    console.log('   4. V√©rifiez que votre bucket "cnol" est configur√©');
    console.log('   5. Dans "Settings" du bucket, v√©rifiez :');
    console.log('      - "Public access" est activ√©');
    console.log('      - "CORS" est configur√© pour *');
    console.log('      - "Bucket policy" autorise s3:GetObject');
    
    console.log('\nüéØ PROCHAINES √âTAPES :');
    console.log('   1. ‚úÖ CORS configur√© pour acc√®s public');
    console.log('   2. ‚úÖ Politique de bucket mise √† jour');
    console.log('   3. üîÑ Attendre la propagation (2-5 minutes)');
    console.log('   4. üß™ Retester l\'acc√®s public');
    console.log('   5. üöÄ Tester la g√©n√©ration de badges en production');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Lancer la correction
fixR2PublicAccess();
